RO (Repository Observer) Client
===============================

Клиентская часть системы RO (Repository Observer), предназначенной для
отслеживания соответствия пакетов, установленных на рабочих системах,
репозиториям, с которыми эти системы связаны.

Изначально система RO рассчитана на работу с системой управления пакетами RPM и
тестировалась при работе с дистрибутивами ALT Linux Sisyphus.

Клиентская часть представляет собой скрипт, написанный на языке Perl и
предназначенный для запуска с командной строки.

Системные требования
====================

Для нормальной работы скрипта требуются следующие Perl-модули:

* Data::Dumper
* Encode
* Getopt::Long
* LWP::UserAgent

Принцип работы
==============

Архитектурно система RO состоит из узлов, на которых запускается скрипт-клиент,
и сервера системы.

Узлы подразделяются на:

* рабочие системы;
* репозитории;
* псевдорепозитории.

Каждому узлу соответствует собственный уникальный идентификатор (максимум 32
символа).

Общение клиента с сервером происходит по одному из стандартных гипертекстовых
протоколов (http / https). Возможно использование произвольного порта. Для
отсылки данных используется метод POST.

Запросы к серверу подразделяются на:

* Запросы инициализации узла. При обработке этих запросов сервер системы
вначале производит уничтожение в БД системы старой информации о связанных с
узлом пакетах. Затем в БД заносится вся поступившая в запросе информация.
* Запросы обновления узла.

Информация о работе с сервером фиксируется в лог-файле, в случае, если в
конфигурации заданы соответствующие параметры.

Действия скрипта при вызове на рабочей системе
----------------------------------------------

С помощью системы RPM скрипт получает список всех установленных в системе
пакетов. Полученный перечень пакетов проходит сравнение с имеющимся в кеше.

В случае отсутствия кеша, скрипт отсылает на сервер системы RO полный список
пакетов в запросе инициализации узла, в противном случае отсылается разница
между полученным списком пакетов и списком, содержащимся в кеше, т.е. запрос
обновления узла.

В целях предотвращения отсылки слишком больших объёмов данных, в рамках одного
запроса отсылается информация не более, чем о 500 пакетах. (Если речь идёт о
процедуре обновления узла, то в рамках одного запроса может быть отослана
информация не более, чем о 1000 пакетов - 500 удалённых и 500 добавленных.)
При этом, если речь идёт о процедуре инициализации узла, то информация о
последующих пакетах отсылается запросами обновления узла. 

В случае ответа от сервера, свидетельствующего о нормальной обработке
отосланного запроса (всех отосланных запросов), список пакетов сохраняется в
кеше.

Действия скрипта на репозитории
-------------------------------

С помощью последовательного перебора файлов в указанной директории(ях)
репозитория скрипт получает список доступных в репозитории пакетов.

Путём анализа changelog-а скрипт пытается определить важность необходимости
обновления пакета. В случае, если в changelog-е содержится упоминание об
изменениях, связанных с безопасностью, индекс важности пакета принимает
значение '2'. Значение по-умолчанию - '1'.

В дальнейшем действия скрипта полностью идентичны действиям при вызове на
рабочей системе.

Действия скрипта в режиме псевдорепозитория
-------------------------------------------

Скрипт отсылает данные о пакетах, содержащиеся в XML-файле(ах) с описанием
пакетов псевдорепозитория, на сервер системы RO в режиме инициализации узла.

В случае, если указано более одного XML-файла, каждый из файлов отсылается в
своём запросе. При этом второй и все последующие запросы являются запросами
обновления узла.

Парсинг и проверка XML-файлов производятся на сервере системы.

Формат вызова
=============

./ro_client [--debug] [--config=<конфигурационный файл>] --type=<тип узла>

Опциональный флаг debug включает вывод дополнительной отладочной информации в
стандартный канал вывода ошибок (STDERR).

В случае, если конфигурационный файл не указан, скрипт попытается использовать
файл 'config' в текущей директории.

Тип узла может принимать одно из трёх значений:

* system (или sys) - в том случае, если речь идёт о рабочей системе;
* repository (или rep) - в том случае, если речь идёт о репозитории;
* pseudo - в том случае, если речь идёт о псевдорепозитории.

Формат конфигурационного файла
==============================

Конфигурационный файл представляет собой фрагмент кода, написанного на языке
Perl и представляющего собой ассоциативный массив (хеш), ключами которого
являются конфигурационные параметры.

Шаблоны типовых конфигураций приведены в соответствующих файлах:

* 'config-system' - шаблон конфигурационного файла для рабочей системы;
* 'config-repository' - шаблон конфигурационного файла для репозитория;
* 'config-pseudo-repository' - шаблон конфигурационного файла для
			     псевдорепозитория;
* 'config' - максимально общий шаблон.

Формат файла с описанием псевдорепозитория
==============================================

Файл, содержищий описание псевдорепозитория (или его части) представляет собой
XML-документ с перечислением всех пакетов, входящих в указанный
псевдорепозиторий (или его часть).

В файле 'packages.xml' приведён шаблон описания псевдорепозитория.
Количество пакетов, описанных элементами 'package' может быть произвольным.

Summary и importance (индекс важности) для пакета указываются опционально.